syntax = "proto3";
package eu.ostrzyciel.jelly.core.proto.v1;

// Jelly RDF serialization with Protocol Buffers.
// Protocol version: 1.0.0

// RDF IRIs
// Either prefix_id or name_id can be zero if the prefix or the suffix
// are not used.
message RdfIri {
  // 1-based, refers to an entry in the prefix lookup.
  uint32 prefix_id = 1;
  // 1-based, refers to an entry in the name lookup.
  uint32 name_id = 2;
}

// RDF literals
message RdfLiteral {
  // The lexical form of the literal.
  string lex = 1;

  // Literal kind – exactly one of these fields must be set.
  oneof literalKind {
    // Simple literal with datatype xsd:string.
    RdfLiteralSimple simple = 2;
    // Language-tagged string.
    string langtag = 3;
    // Typed literal. The datatype is a reference to an entry in the
    // datatype lookup.
    uint32 datatype = 4;
  }
}

// Empty message indicating a simple literal
message RdfLiteralSimple {
}

// Empty message indicating a repeated term from the previous statement.
message RdfRepeat {
}

// RDF terms
message RdfTerm {
  // Exactly one of these fields must be set.
  oneof term {
    // IRI
    RdfIri        iri = 1;
    // Blank node
    string        bnode = 2;
    // Literal
    RdfLiteral    literal = 3;
    // RDF-star quoted triple
    RdfTriple     triple_term = 4;
    // Repeated term from the previous statement.
    // Only valid in statements, not quoted triples.
    RdfRepeat     repeat = 10;
  }
}

// Empty message indicating the default RDF graph.
message RdfDefaultGraph {
}

// RDF graph nodes
message RdfGraph {
  // Exactly one of these fields must be set.
  oneof graph {
    // IRI
    RdfIri           iri = 1;
    // Blank node
    string           bnode = 2;
    // Literal – only valid for generalized RDF streams
    RdfLiteral       literal = 3;
    // Default graph
    RdfDefaultGraph  default_graph = 4;
    // Repeated term – only valid in a QUADS stream
    RdfRepeat        repeat = 10;
  }
}

// RDF triple
message RdfTriple {
  // Triple subject
  RdfTerm s = 1;
  // Triple predicate
  RdfTerm p = 2;
  // Triple object
  RdfTerm o = 3;
}

// RDF quad
message RdfQuad {
  // Quad subject
  RdfTerm  s = 1;
  // Quad predicate
  RdfTerm  p = 2;
  // Quad object
  RdfTerm  o = 3;
  // Quad graph node
  RdfGraph g = 4;
}

// Start of a graph in a GRAPHS stream
message RdfGraphStart {
  RdfGraph graph = 1;
}

// End of a graph in a GRAPHS stream
message RdfGraphEnd {
}

// Entry in the name lookup table
message RdfNameEntry {
  // 1-based identifier
  uint32 id = 1;
  // Value of the name (UTF-8 encoded)
  string value = 2;
}

// Entry in the prefix lookup table
message RdfPrefixEntry {
  // 1-based identifier
  uint32 id = 1;
  // Value of the prefix (UTF-8 encoded)
  string value = 2;
}

// Entry in the datatype lookup table
message RdfDatatypeEntry {
  // 1-based identifier
  uint32 id = 1;
  // Value of the datatype (UTF-8 encoded)
  string value = 2;
}

// RDF stream options
message RdfStreamOptions {
  // Name of the stream (completely optional).
  // This may be used for, e.g., topic names in a pub/sub system.
  string stream_name = 1;
  // Type of the stream (required)
  PhysicalStreamType physical_type = 2;
  // Whether the stream may contain generalized triples, quads, or datasets
  bool generalized_statements = 3;
  // Whether RdfRepeat will be used
  bool use_repeat = 4;
  // Whether the stream may contain RDF-star statements
  bool rdf_star = 5;
  // Maximum size of the name lookup table
  uint32 max_name_table_size = 9;
  // Maximum size of the prefix lookup table
  uint32 max_prefix_table_size = 10;
  // Maximum size of the datatype lookup table
  uint32 max_datatype_table_size = 11;
  // Logical (RDF-STaX-based) stream type
  // In contrast to the physical type, this field is entirely optional.
  LogicalStreamType logical_type = 14;
  // Protocol version (required)
  // For Jelly 1.0.x value must be 1.
  // For custom extensions, the value must be 1000 or higher.
  uint32 version = 15;
}

// Physical stream type
// This determines how the data is encoded in the stream, not the logical
// structure of the data. See LogicalStreamType for the latter.
enum PhysicalStreamType {
  // Unspecified stream type – invalid
  PHYSICAL_STREAM_TYPE_UNSPECIFIED = 0;
  // RDF triples
  PHYSICAL_STREAM_TYPE_TRIPLES = 1;
  // RDF quads
  PHYSICAL_STREAM_TYPE_QUADS = 2;
  // RDF triples grouped in graphs
  PHYSICAL_STREAM_TYPE_GRAPHS = 3;
}

// Logical stream type, according to the RDF Stream Taxonomy (RDF-STaX).
// Type 0 is reserved for the unspecified stream type.
// The rest of the type numbers follow the taxonomical structure of RDF-STaX.
// For example: 1 is a subtype of 0, 13 and 23 are subtypes of 3, 
// 114 is a subtype of 14, etc.
// 
// Types 1–4 correspond to the four base concrete stream types. Their 
// subtypes can be in most cases simply processed in the same way as 
// the base types.
// Therefore, implementations can take the modulo 10 of the stream 
// type to determine the base type of the stream and use this information 
// to select the appropriate processing logic.
//
// RDF-STaX version: 1.1.0
// https://w3id.org/stax/1.1.0
enum LogicalStreamType {
  // Unspecified stream type – invalid
  LOGICAL_STREAM_TYPE_UNSPECIFIED = 0;
  // Flat RDF triple stream
  // https://w3id.org/stax/ontology#flatTripleStream
  LOGICAL_STREAM_TYPE_FLAT_TRIPLES = 1;
  // Flat RDF quad stream
  // https://w3id.org/stax/ontology#flatQuadStream
  LOGICAL_STREAM_TYPE_FLAT_QUADS = 2;
  // RDF graph stream
  // https://w3id.org/stax/ontology#graphStream
  LOGICAL_STREAM_TYPE_GRAPHS = 3;
  // RDF dataset stream
  // https://w3id.org/stax/ontology#datasetStream
  LOGICAL_STREAM_TYPE_DATASETS = 4;

  // RDF subject graph stream (subtype of RDF graph stream)
  // https://w3id.org/stax/ontology#subjectGraphStream
  LOGICAL_STREAM_TYPE_SUBJECT_GRAPHS = 13;

  // RDF named graph stream (subtype of RDF dataset stream)
  // https://w3id.org/stax/ontology#namedGraphStream
  LOGICAL_STREAM_TYPE_NAMED_GRAPHS = 14;
  // RDF timestamped named graph stream (subtype of RDF dataset stream)
  // https://w3id.org/stax/ontology#timestampedNamedGraphStream
  LOGICAL_STREAM_TYPE_TIMESTAMPED_NAMED_GRAPHS = 114;
}

// RDF stream row
message RdfStreamRow {
  // Exactly one of these fields must be set.
  oneof row {
    // Stream options. Must occur at the start of the stream.
    RdfStreamOptions options = 1;
    // RDF triple statement.
    // Valid in TRIPLES and GRAPHS streams.
    RdfTriple triple = 2;
    // RDF quad statement.
    // Only valid in a QUADS stream.
    RdfQuad quad = 3;
    // Graph boundary: ends the currently transmitted graph and starts a new one
    // Only valid in a GRAPHS stream.
    RdfGraphStart graph_start = 4;
    // Explicit end of a graph.
    // Signals the consumer that the transmitted graph is complete.
    // Only valid in a GRAPHS stream.
    RdfGraphEnd graph_end = 5;
    // Entry in the name lookup table.
    RdfNameEntry name = 9;
    // Entry in the prefix lookup table.
    RdfPrefixEntry prefix = 10;
    // Entry in the datatype lookup table.
    RdfDatatypeEntry datatype = 11;
  }
}

// RDF stream frame
message RdfStreamFrame {
  // Stream rows
  repeated RdfStreamRow rows = 1;
}
