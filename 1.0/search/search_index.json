{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Test \u2013 index.md</p>"},{"location":"contributing/","title":"Contributing","text":"<p>TODO</p>"},{"location":"licensing/","title":"Licensing and citation","text":"<p>TODO</p>"},{"location":"jvm/","title":"Jelly JVM (Scala) implementation","text":""},{"location":"jvm/getting-started/","title":"Getting started","text":"<p>Compatibility \u2013 Java 11 \u2013 21. 11, 17, 21 are tested in CI.</p>"},{"location":"jvm/grpc/","title":"User guide \u2013 gRPC","text":""},{"location":"jvm/grpc/#example-grpc-pubsub","title":"Example \u2013 gRPC pub/sub","text":""},{"location":"jvm/implementation/","title":"Developer guide \u2013 implementing conversions for other libraries","text":"<p>Currently converters for the two most popular RDF JVM libraries are implemented \u2013 RDF4J and Jena. But it is possible to implement your own converters and adapt the Jelly serialization code to any RDF library with little effort.</p> <p>To do this, you will need to implement three traits (interfaces in Java) from the <code>jelly-core</code> module: <code>ProtoEncoder</code>, <code>ProtoDecoderConverter</code>, and <code>ConverterFactory</code>.</p> <ul> <li> <p>ProtoEncoder (serialization)</p> <ul> <li><code>get*</code> methods deconstruct triple statements, quad statements, and quoted triples (RDF-star). You can make them <code>inline</code>.</li> <li><code>nodeToProto</code> and <code>graphToProto</code> should translate into Jelly's representation all possible variations of RDF terms in the SPO and G positions, respectively.</li> <li>Example implementation for Jena: JenaProtoEncoder</li> <li>You can skip implementing this trait if you don't need serialization.</li> <li>You can also skip implementing some methods (make them throw an exception or return null) if, for example, you don't want to work with quads or RDF-start.</li> </ul> </li> <li> <p>ProtoDecoderConverter (deserialization)</p> <ul> <li>The <code>make*</code> methods should construct new RDF terms and statements. You can make them <code>inline</code>.</li> <li>Example implementation for Jena: JenaDecoderConverter</li> <li>You can skip implementing this trait if you don't need deserialization.</li> <li>You can also skip implementing some methods (make them throw an exception or return null) if, for example, you don't want to work with quads or RDF-start.</li> </ul> </li> <li> <p>ConverterFactory \u2013 wrapper that allows other modules to use your converter.</p> <ul> <li>The methods should just return new instances of your <code>ProtoEncoder</code> and <code>ProtoDecoderConverter</code> implementations.</li> <li>Example for Jena: JenaConverterFactory</li> </ul> </li> </ul>"},{"location":"jvm/reactive/","title":"User guide \u2013 reactive streaming","text":"<p>TODO</p>"},{"location":"jvm/reactive/#example-streaming-with-kafka","title":"Example: streaming with Kafka","text":""},{"location":"jvm/reactive/#byte-streams","title":"Byte streams","text":"<p>TODO</p> <p>(referenced by specification/serialization.md)</p>"},{"location":"jvm/releases/","title":"Developer guide \u2013 releases","text":""},{"location":"jvm/releases/#full-versioned-releases","title":"Full (versioned) releases","text":"<p>Full (versioned) releases are created manually and follow the Semantic Versioning scheme for binary compatibility.</p> <p>To create a new tagged release (example for version 1.2.3): <pre><code>$ git checkout main\n$ git pull\n$ git tag v1.2.3\n$ git push origin v1.2.3\n</code></pre></p> <p>The rest (packaging and release creation) will be handled automatically by the CI. The release will be pushed to Maven Central.</p>"},{"location":"jvm/releases/#snapshot-releases","title":"Snapshot releases","text":"<p>Snapshot releases are triggered automatically by commits in the <code>main</code> branch. Snapshots are pushed to the Sonatype snapshot repository.</p>"},{"location":"specification/","title":"Protocol specification","text":"<p>TODO</p>"},{"location":"specification/#stream-types","title":"Stream types","text":"<p>TODO</p>"},{"location":"specification/media-type/","title":"File extension and media type","text":"<p>Jelly is not tied to any specific file extension and does not have a registered media type. However, you can use the following:</p> <ul> <li>File extension: <code>.jelly</code></li> <li>Media type: <code>application/x-jelly-rdf</code></li> </ul> <p>The files should be saved in the delimited variant of Jelly.</p>"},{"location":"specification/media-type/#see-also","title":"See also","text":"<ul> <li>Serialization format specification</li> </ul>"},{"location":"specification/reference/","title":"Protocol Documentation","text":""},{"location":"specification/reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>grpc.proto</p> <ul> <li>RdfStreamReceived</li> <li> <p>RdfStreamSubscribe</p> </li> <li> <p>RdfStreamService</p> </li> </ul> </li> <li> <p>rdf.proto</p> <ul> <li>RdfDatatypeEntry</li> <li>RdfDefaultGraph</li> <li>RdfGraph</li> <li>RdfGraphEnd</li> <li>RdfGraphStart</li> <li>RdfIri</li> <li>RdfLiteral</li> <li>RdfLiteralSimple</li> <li>RdfNameEntry</li> <li>RdfPrefixEntry</li> <li>RdfQuad</li> <li>RdfRepeat</li> <li>RdfStreamFrame</li> <li>RdfStreamOptions</li> <li>RdfStreamRow</li> <li>RdfTerm</li> <li> <p>RdfTriple</p> </li> <li> <p>RdfStreamType</p> </li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"specification/reference/#grpcproto","title":"grpc.proto","text":""},{"location":"specification/reference/#rdfstreamreceived","title":"RdfStreamReceived","text":"<p>Acknowledgement of receiving a stream sent by the server to the client.</p> <p></p>"},{"location":"specification/reference/#rdfstreamsubscribe","title":"RdfStreamSubscribe","text":"<p>Subscribe command sent by the client to the server.</p> Field Type Label Description topic string The topic to which the client wants to subscribe (UTF-8 encoded). requested_options RdfStreamOptions Optional: the stream options requested by the client. The server should respond with a stream that matches these options. In case that is not possible, the server must respond with the INVALID_ARGUMENT error. <p></p>"},{"location":"specification/reference/#rdfstreamservice","title":"RdfStreamService","text":"<p>Pub/Sub service for RDF streams, to be implemented by the server.</p> Method Name Request Type Response Type Description SubscribeRdf RdfStreamSubscribe RdfStreamFrame stream Subscribe to an RDF stream. PublishRdf RdfStreamFrame stream RdfStreamReceived Publish an RDF stream. <p></p> <p>Top</p>"},{"location":"specification/reference/#rdfproto","title":"rdf.proto","text":""},{"location":"specification/reference/#rdfdatatypeentry","title":"RdfDatatypeEntry","text":"<p>Entry in the datatype lookup table</p> Field Type Label Description id uint32 1-based identifier value string Value of the datatype (UTF-8 encoded) <p></p>"},{"location":"specification/reference/#rdfdefaultgraph","title":"RdfDefaultGraph","text":"<p>Empty message indicating the default RDF graph.</p> <p></p>"},{"location":"specification/reference/#rdfgraph","title":"RdfGraph","text":"<p>RDF graph nodes</p> Field Type Label Description iri RdfIri IRI bnode string Blank node literal RdfLiteral Literal \u2013 only valid for generalized RDF streams default_graph RdfDefaultGraph Default graph repeat RdfRepeat Repeated term \u2013 only valid in a QUADS stream <p></p>"},{"location":"specification/reference/#rdfgraphend","title":"RdfGraphEnd","text":"<p>End of a graph in a GRAPHS stream</p> <p></p>"},{"location":"specification/reference/#rdfgraphstart","title":"RdfGraphStart","text":"<p>Start of a graph in a GRAPHS stream</p> Field Type Label Description graph RdfGraph <p></p>"},{"location":"specification/reference/#rdfiri","title":"RdfIri","text":"<p>RDF IRIs Either prefix_id or name_id can be zero if the prefix or the suffix are not used.</p> Field Type Label Description prefix_id uint32 1-based, refers to an entry in the prefix lookup. name_id uint32 1-based, refers to an entry in the name lookup. <p></p>"},{"location":"specification/reference/#rdfliteral","title":"RdfLiteral","text":"<p>RDF literals</p> Field Type Label Description lex string The lexical form of the literal. simple RdfLiteralSimple Simple literal with datatype xsd:string. langtag string Language-tagged string. datatype uint32 Typed literal. The datatype is a reference to an entry in the datatype lookup. <p></p>"},{"location":"specification/reference/#rdfliteralsimple","title":"RdfLiteralSimple","text":"<p>Empty message indicating a simple literal</p> <p></p>"},{"location":"specification/reference/#rdfnameentry","title":"RdfNameEntry","text":"<p>Entry in the name lookup table</p> Field Type Label Description id uint32 1-based identifier value string Value of the name (UTF-8 encoded) <p></p>"},{"location":"specification/reference/#rdfprefixentry","title":"RdfPrefixEntry","text":"<p>Entry in the prefix lookup table</p> Field Type Label Description id uint32 1-based identifier value string Value of the prefix (UTF-8 encoded) <p></p>"},{"location":"specification/reference/#rdfquad","title":"RdfQuad","text":"<p>RDF quad</p> Field Type Label Description s RdfTerm Quad subject p RdfTerm Quad predicate o RdfTerm Quad object g RdfGraph Quad graph node <p></p>"},{"location":"specification/reference/#rdfrepeat","title":"RdfRepeat","text":"<p>Empty message indicating a repeated term from the previous statement.</p> <p></p>"},{"location":"specification/reference/#rdfstreamframe","title":"RdfStreamFrame","text":"<p>RDF stream frame</p> Field Type Label Description rows RdfStreamRow repeated Stream rows <p></p>"},{"location":"specification/reference/#rdfstreamoptions","title":"RdfStreamOptions","text":"<p>RDF stream options</p> Field Type Label Description stream_name string Name of the stream (completely optional). This may be used for, e.g., topic names in a pub/sub system. stream_type RdfStreamType Type of the stream (required) generalized_statements bool Whether the stream may contain generalized triples, quads, or datasets use_repeat bool Whether RdfRepeat will be used rdf_star bool Whether the stream may contain RDF-star statements max_name_table_size uint32 Maximum size of the name lookup table max_prefix_table_size uint32 Maximum size of the prefix lookup table max_datatype_table_size uint32 Maximum size of the datatype lookup table version uint32 Protocol version (required) For Jelly 1.0.x value must be 1. For custom extensions, the value must be 1000 or higher. <p></p>"},{"location":"specification/reference/#rdfstreamrow","title":"RdfStreamRow","text":"<p>RDF stream row</p> Field Type Label Description options RdfStreamOptions Stream options. Must occur at the start of the stream. triple RdfTriple RDF triple statement. Valid in TRIPLES and GRAPHS streams. quad RdfQuad RDF quad statement. Only valid in a QUADS stream. graph_start RdfGraphStart Graph boundary: ends the currently transmitted graph and starts a new one Only valid in a GRAPHS stream. graph_end RdfGraphEnd Explicit end of a graph. Signals the consumer that the transmitted graph is complete. Only valid in a GRAPHS stream. name RdfNameEntry Entry in the name lookup table. prefix RdfPrefixEntry Entry in the prefix lookup table. datatype RdfDatatypeEntry Entry in the datatype lookup table. <p></p>"},{"location":"specification/reference/#rdfterm","title":"RdfTerm","text":"<p>RDF terms</p> Field Type Label Description iri RdfIri IRI bnode string Blank node literal RdfLiteral Literal triple_term RdfTriple RDF-star quoted triple repeat RdfRepeat Repeated term from the previous statement. Only valid in statements, not quoted triples. <p></p>"},{"location":"specification/reference/#rdftriple","title":"RdfTriple","text":"<p>RDF triple</p> Field Type Label Description s RdfTerm Triple subject p RdfTerm Triple predicate o RdfTerm Triple object <p></p>"},{"location":"specification/reference/#rdfstreamtype","title":"RdfStreamType","text":"<p>RDF stream type</p> Name Number Description RDF_STREAM_TYPE_UNSPECIFIED 0 Unspecified stream type \u2013 invalid RDF_STREAM_TYPE_TRIPLES 1 RDF triples RDF_STREAM_TYPE_QUADS 2 RDF quads RDF_STREAM_TYPE_GRAPHS 3 RDF triples grouped in graphs"},{"location":"specification/reference/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"specification/serialization/","title":"Jelly serialization format","text":"<p>Author: TODO</p> <p>TODO: intro, reference to RDF 1.1 and RDF-star, link to the proto reference, status of this spec</p> <p>define consumer, producer</p> <p>examples: https://protobuf.dev/reference/protobuf/textformat-spec/</p> <p>UTF-8</p> <p>Info</p> <p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p> <p>Note</p> <p>The \"Note\" blocks in this document are not part of the specification, but rather provide additional information for implementers.</p>"},{"location":"specification/serialization/#conformance","title":"Conformance","text":"<p>Implementations MAY choose to implement only a subset of the following specification. In this case, they SHOULD clearly specify which parts of the specification they implement. In the rest of this specification, the keywords \"MUST\", \"MUST NOT\", etc. refer to full (not partial) implementations.</p> <p>Note</p> <p>Implementations may in particular choose to not implement features that are not supported on the target platform (e.g., RDF datasets, RDF-star, generalized RDF terms, etc.).</p> <p>Implementations MAY also choose to extend Jelly with additional features that SHOULD NOT interfere with the serialization being readable by implementations which follow the specification.</p>"},{"location":"specification/serialization/#versioning","title":"Versioning","text":"<p>The protocol follows the Semantic Versioning 2.0 scheme. Each MAJOR.MINOR semantic version corresponds to an integer version tag in the protocol. The version tag is encoded in the <code>version</code> field of the <code>RdfStreamOptions</code> message. See also the section on stream options for more information on how to handle the version tags in serialized streams.</p> <p>The following versions of the protocol are defined:</p> Version tag Semantic version 1 1.0.x (current) <p>Note</p> <p>Releases of the protocol are published on GitHub.</p>"},{"location":"specification/serialization/#backward-compatibility","title":"Backward compatibility","text":"<p>Implementations SHOULD ensure backward compatibility. To achieve backward compatibility, the implementation MUST be able to read all messages from the previous releases of the protocol with the same MAJOR version. The implementation MAY also be able to read messages from previous releases of the protocol with a different MAJOR version.</p> <p>Note</p> <p>The protocol is designed in such a way that you don't need to worry about backward compatibility. The only thing you need to do is to implement the latest version of the protocol, and you will automatically get backward compatibility with all previous versions (of the same MAJOR).</p>"},{"location":"specification/serialization/#forward-compatibility","title":"Forward compatibility","text":"<p>Forward compatibility is not guaranteed. Implementations MAY be able to read messages from future releases of the protocol with the same MAJOR version. Implementations MAY also be able to read messages from future releases of the protocol with a different MAJOR version.</p>"},{"location":"specification/serialization/#format-specification","title":"Format specification","text":"<p>The Jelly serialization format uses Protocol Buffers version 3 as the underlying serialization format. All implementations MUST use a compliant Protocol Buffers implementation. The Protocol Buffers schema for Jelly serialization is defined in <code>rdf.proto</code> (source code, reference).</p> <p>The Jelly format is a stream (i.e., an ordered sequence) of stream frames. The frames may be sent one-by-one using a dedicated streaming protocol (e.g., gRPC, MQTT, Kafka) or written in sequence to a byte stream (e.g., a file or socket). When writing to a byte stream, the frames MUST be delimeted \u2013 see the delimited variant.</p> <p>Jelly supports several distinct types of streams, and uses a simple and configurable compression mechanism using lookup tables.</p>"},{"location":"specification/serialization/#stream-frames","title":"Stream frames","text":"<p>A stream frame is a message of type <code>RdfStreamFrame</code> (reference). The message has only one field (<code>rows</code>), which is a repeated field of type <code>RdfStreamRow</code> (reference). A stream frame may contain any number of rows, however it is RECOMMENDED to keep the size of the frames below 1 MB. The semantics for the frames are not defined by the protocol. The end users are free to define their own semantics for the frames.</p> <p>Note</p> <p>A stream frame in \"simple flat file\" is just a batch of RDF statements \u2013 the stream frames may carry no semantics in this case. You can make the stream frame as long as the file itself, but this is not recommended, as it would make the file harder to process.</p> <p>Note</p> <p>Stream frames can also be used to indicate individual stream elements. For example, in the case of a stream of RDF datasets, each frame may contain one dataset. RiverBench datasets use this convention in their distributions.</p>"},{"location":"specification/serialization/#ordering","title":"Ordering","text":"<p>Stream frames MUST be processed strictly in order to preserve the semantics of the stream.</p> <p>Implementations MAY choose to adopt a non-standard solution where the order of the frames is not guaranteed and the stream can be read in more than one order. The implementation MUST clearly specify in the documentation that it uses such a non-standard solution.</p> <p>Note</p> <p>An example where not adhering to the strict ordering may be useful is when you are dealing with a network streaming protocol that does not guarantee the order of the messages (e.g., MQTT).</p> <p>Note</p> <p>The main thing you will need to worry about is the order of the lookup tables. If you can, emit all lookup tables at the beginning of the stream. When using stream partitions (e.g., in Kafka), you should ensure that the lookups are emitted to each partition. Alternatively, you can transmit the lookup tables separately from the stream.</p>"},{"location":"specification/serialization/#stream-rows","title":"Stream rows","text":"<p>A stream row is a message of type <code>RdfStreamRow</code>. It has one of the following fields set:</p> <ul> <li><code>options</code> (1) \u2013 stream options header, indicating the compression options and the used RDF features in the stream.</li> <li><code>triple</code> (2) \u2013 RDF triple statement. It MUST NOT appear in streams of type other than <code>RDF_STREAM_TYPE_TRIPLES</code> or <code>RDF_STREAM_TYPE_GRAPHS</code>.</li> <li><code>quad</code> (3) \u2013 RDF quad statement. It MUST NOT appear in streams of type other than <code>RDF_STREAM_TYPE_QUADS</code>.</li> <li><code>graph_start</code> (4) \u2013 indicates the start of a graph (named or default). It MUST NOT appear in streams of type other than <code>RDF_STREAM_TYPE_GRAPHS</code>.</li> <li><code>graph_end</code> (5) \u2013 indicates the end of a graph (named or default). It MUST NOT appear in streams of type other than <code>RDF_STREAM_TYPE_GRAPHS</code>.</li> <li><code>name</code> (9) \u2013 entry in the name lookup.</li> <li><code>prefix</code> (10) \u2013 entry in the prefix lookup.</li> <li><code>datatype</code> (11) \u2013 entry in the datatype lookup.</li> </ul> <p>Stream rows MUST be processed strictly in order to preserve the semantics of the stream.</p>"},{"location":"specification/serialization/#stream-types","title":"Stream types","text":"<p>The type of the stream MUST be explicitly specified in the (stream options header)[#stream-options]. The type of the stream is defined by the <code>RdfStreamType</code> enum (reference). The following types are defined:</p> <ul> <li><code>RDF_STREAM_TYPE_UNSPECIFIED</code> (0) \u2013 default value. This stream type MUST NOT be used. The implementations SHOULD treat this value as an error.</li> <li><code>RDF_STREAM_TYPE_TRIPLES</code> (1) \u2013 stream of RDF triple statements. Each stream frame (or the entire stream) corresponds to an RDF graph. In this case, the stream MUST NOT contain <code>RdfStreamRow</code> messages with the <code>quad</code>, <code>graph_start</code>, or <code>graph_end</code> fields set.</li> <li><code>RDF_STREAM_TYPE_QUADS</code> (2) \u2013 stream of RDF quad statements (same as simple statements in N-Quads). Each stream frame (or the entire stream) corresponds to an RDF dataset. In this case, the stream MUST NOT contain <code>RdfStreamRow</code> messages with the <code>triple</code>, <code>graph_start</code>, or <code>graph_end</code> fields set.</li> <li><code>RDF_STREAM_TYPE_GRAPHS</code> (3) \u2013 stream of RDF graphs (named or default). Each stream frame (or the entire stream) corresponds to an RDF dataset. In this case, the stream MUST NOT contain <code>RdfStreamRow</code> messages with the <code>quad</code> fields set.</li> </ul> <p>Note</p> <p>See also a more human explanation of the available stream types.</p>"},{"location":"specification/serialization/#stream-options","title":"Stream options","text":"<p>The stream options is a message of type <code>RdfStreamOptions</code> (reference). It MUST be the first row in the stream. It MAY appear more than once in the stream (also after other rows), but it MUST be identical to all previous occurrences. Implementations MAY throw an error if the stream options header is not present at the start of the stream, alternatively, they MAY use the default options. Implementations SHOULD NOT throw an error if the stream options header is present more than once in the stream.</p> <p>The stream options header instructs the consumer of the stream (parser) on the size of the needed lookups to decode the stream and the features used by the stream.</p> <p>The stream options header contains the following fields:</p> <ul> <li><code>stream_name</code> (1) \u2013 name of the stream. This field is OPTIONAL and its use is not defined by the protocol. It MAY be used to identify the stream.</li> <li><code>stream_type</code> (2) \u2013 type of the stream. This field is REQUIRED.</li> <li><code>generalized_statements</code> (3) \u2013 whether the stream contains generalized RDF triples or graphs. This field MUST be set to true if the stream contains generalized RDF triples or graphs. It SHOULD NOT be set to true if the stream does not use this feature. This field is OPTIONAL and defaults to false.</li> <li><code>use_repeat</code> (4) \u2013 whether the stream uses repeated terms compression. This field MUST be set to true if the stream uses repeated terms. It SHOULD NOT be set to true if the stream does not use this feature. This field is OPTIONAL and defaults to false.</li> <li><code>rdf_star</code> (5) \u2013 whether the stream uses RDF-star (quoted triples). This field MUST be set to true if the stream uses RDF-star. It SHOULD NOT be set to true if the stream does not use this feature. This field is OPTIONAL and defaults to false.</li> <li><code>max_name_table_size</code> (9) \u2013 maximum size of the name lookup. This field is OPTIONAL and defaults to 0 (no lookup). If the field is set to 0, the name lookup MUST NOT be used in the stream. If the field is set to a positive value, the name lookup SHOULD be used in the stream and the size of the lookup MUST NOT exceed the value of this field.</li> <li><code>max_prefix_table_size</code> (10) \u2013 maximum size of the prefix lookup. This field is OPTIONAL and defaults to 0 (no lookup). If the field is set to 0, the prefix lookup MUST NOT be used in the stream. If the field is set to a positive value, the prefix lookup SHOULD be used in the stream and the size of the lookup MUST NOT exceed the value of this field.</li> <li><code>max_datatype_table_size</code> (11) \u2013 maximum size of the datatype lookup. This field is OPTIONAL and defaults to 0 (no lookup). If the field is set to 0, the datatype lookup MUST NOT be used in the stream (which effectively prohibits the use of datatype literals). If the field is set to a positive value, the datatype lookup SHOULD be used in the stream and the size of the lookup MUST NOT exceed the value of this field.</li> <li><code>version</code> (15) \u2013 version tag of the stream. This field is REQUIRED.<ul> <li>The version tag is encoded as a varint. The version tag MUST be greater than 0.</li> <li>The producer of the stream MUST set the version tag to the version tag of the implementation.</li> <li>The consumer SHOULD throw an error if the version tag is greater than the version tag of the implementation.</li> <li>The consumer SHOULD throw an error if the version tag is zero.</li> <li>The consumer SHOULD NOT throw an error if the version tag is not zero but lower than the version tag of the implementation.</li> <li>The producer may use version tags greater than 1000 to indicate non-standard versions of the protocol.</li> </ul> </li> </ul>"},{"location":"specification/serialization/#prefix-name-and-datatype-lookups","title":"Prefix, name, and datatype lookups","text":"<p>Jelly uses a common mechanism of lookup tables for IRI prefixes, IRI names (postfixes), and datatypes. The lookups are used to compress the IRIs and datatypes in the stream. All lookups function in the same way:</p> <ul> <li>The lookup is a map from a varint to a valid UTF-8 string.</li> <li>The lookup can be modified at any point in the stream. The modification consists of setting the lookup for a given varint to a given string. The modification MUST be applied to all subsequent rows in the stream.</li> <li>The first use of a given lookup element MUST be after it is defined in the lookup. If the consumer encounters a lookup element that is not defined in the lookup, it SHOULD throw an error.</li> <li>The lookups are indexed from 1. The default value of 0 MUST NOT be used as a key in the lookup.</li> <li>The maximum size of the lookup is communicated at the start of the stream (see stream options header). The producer of the stream MUST NOT exceed the maximum size of the lookup. The consumer of the stream MAY implement the lookup as a fixed-size array, or extend it dynamically.</li> <li>The lookup is updated with different messages, depending on the type of the lookup:<ul> <li><code>RdfNameEntry</code> for the name lookup,</li> <li><code>RdfPrefixEntry</code> for the prefix lookup,</li> <li><code>RdfDatatypeEntry</code> for the datatype lookup.</li> </ul> </li> <li>The producer may use any strategy to update the lookup.</li> </ul> <p>Note</p> <p>The spec does not specify what strategy should the producer use to update the lookup. You can use a the LRU strategy (as used in the Scala implementation), LFU, or something more complex. You can also have a fixed lookup in the producer and communicate it at the start of the stream. This is possible if you are using a fixed set of prefixes, names, or datatypes and want to conserve computing power (e.g., in IoT devices).</p> <p>The simplest way to implement the consumer's lookup is to just use an indexed array of fixed size. The workload on the consumer's side is much lower than on the producer's side, so your choice of the strategy depends largely on the producer.</p>"},{"location":"specification/serialization/#rdf-statements-and-graphs","title":"RDF statements and graphs","text":"<p>RDF statements (triples or quads) are communicated in three different ways, depending on the type of the stream:</p> <ul> <li><code>RDF_STREAM_TYPE_TRIPLES</code> \u2013 triples are encoded using <code>RdfTriple</code> messages.<ul> <li><code>RdfTriple</code> has three fields: <code>s</code>, <code>p</code>, <code>o</code>, corresponding to the subject, predicate, and object of the triple. All of these fields are RDF terms and are REQUIRED.</li> </ul> </li> <li><code>RDF_STREAM_TYPE_QUADS</code> \u2013 quads are encoded using <code>RdfQuad</code> messages.<ul> <li><code>RdfQuad</code> has four fields: <code>s</code>, <code>p</code>, <code>o</code>, <code>g</code>, corresponding to the subject, predicate, object, and graph of the quad. The <code>s</code>, <code>p</code>, <code>o</code> are RDF terms and are REQUIRED. The <code>g</code> field is an RDF graph node and is REQUIRED.</li> </ul> </li> <li><code>RDF_STREAM_TYPE_GRAPHS</code> \u2013 graphs are encoded using <code>RdfGraphStart</code> and <code>RdfGraphEnd</code> messages. Triples between the start and end of the graph are encoded using <code>RdfTriple</code> messages. If a triple is between the start and end of the graph, it is considered to be in the graph.<ul> <li>In this type of stream, triples MUST NOT occur outside of a graph. If a triple is encountered outside a graph, the consumer SHOULD throw an error.</li> <li>A graph start MUST NOT occur inside another graph. If a graph start is encountered inside another graph, the consumer SHOULD throw an error.</li> <li>A graph end MUST NOT occur outside a graph. If a graph end is encountered outside a graph, the consumer MAY throw an error.</li> <li>A graph MAY be empty (i.e., it may contain no triples).</li> <li>A graph corresponding to one graph node MAY occur multiple times in a stream or a stream frame. The consumer MUST treat all occurrences of the graph as a single RDF graph.</li> </ul> </li> </ul>"},{"location":"specification/serialization/#rdf-terms","title":"RDF terms","text":"<p>RDF terms are encoded using the <code>RdfTerm</code> message. The message has one of the following fields set: <code>iri</code>, <code>bnode</code>, <code>literal</code>, <code>triple_term</code>, <code>repeat</code>, corresponding to RDF IRIs, blank nodes, literals, RDF-star quoted triples, and repeated terms, respectively. Exactly one of these fields MUST be set.</p>"},{"location":"specification/serialization/#iris","title":"IRIs","text":"<p>The IRIs are encoded using the <code>RdfIri</code> message. The message has two fields that together make up the IRI:</p> <ul> <li><code>prefix_id</code> (1) \u2013 1-based index of the prefix of the IRI, corresponding to an entry in the prefix lookup. This field is OPTIONAL and the default value (0) indicates an empty prefix.</li> <li><code>name_id</code> (2) \u2013 1-based index of the name (suffix) of the IRI, corresponding to an entry in the name lookup. This field is OPTIONAL and the default value (0) indicates an empty name.</li> </ul> <p>At least one of the <code>prefix_id</code> and <code>name_id</code> fields MUST be set to a non-default, positive value. The IRI is then constructed by concatenating the prefix and the name. The IRI SHOULD be a valid IRI, as defined in RFC 3987.</p> Example (click to expand) <p>Assume the following lookup entries were defined in the stream (wrapping <code>RdfStreamRow</code>s were omitted for brevity):</p> <pre><code>RdfPrefixEntry {\n    id: 1\n    prefix: \"http://example.com/\"\n}\nRdfNameEntry {\n    id: 4\n    name: \"example\"\n}\nRdfNameEntry {\n    id: 1\n    name: \"http://test.com/test\"\n}\n</code></pre> <p>Then the following IRIs are encoded as follows:</p> <pre><code># http://example.com/example\nRdfIri {\n    prefix_id: 1\n    name_id: 4\n} \n\n# http://example.com/\nRdfIri {\n    prefix_id: 1\n}\n\n# http://test.com/test\nRdfIri {\n    name_id: 1\n}\n</code></pre> <p>Note</p> <p>The spec does not specify how to split the IRIs into names and prefixes. You can use any strategy you want, as long as you follow the rules above. The simplest way is to split the IRI at the last occurrence of the <code>#</code> or <code>/</code> character \u2013 this is what the Scala implementation uses. The prefixes are not meant to be user-facing, but you can also use user-defined prefixes (e.g., <code>@prefix</code> in Turtle) to split the IRIs.</p>"},{"location":"specification/serialization/#blank-nodes","title":"Blank nodes","text":"<p>RDF blank nodes are represented using simple strings. The string is the identifier of the blank node. The identifier may be any valid UTF-8 string.</p> <p>Because the spec does not define the semantics of the stream frames, blank node identifiers are not guaranteed to be unique across the stream frames. The consumer MAY choose to treat the blank nodes as unique across the stream (and thus treat all occurences of the identifier as a single node), or it MAY choose to treat them as unique only within a single stream frame. The producer SHOULD specify in the documentation which strategy it uses.</p> <p>Note</p> <p>If the stream is meant to represent a single RDF graph or dataset, then the blank node identifiers should be unique across the stream so that you can refer to them across stream frame boundaries. If the frames refer to different graphs or datasets, then the blank node identifiers should be unique only within a single frame.</p> <p>Note</p> <p>Many RDF libraries (e.g., RDF4J, Apache Jena) use internal identifiers for blank nodes, which can be used as the identifiers in Jelly streams. You can also use a different format, for example with shorter identifiers to preserve space.</p>"},{"location":"specification/serialization/#literals","title":"Literals","text":"<p>RDF literals are represented using the <code>RdfLiteral</code> message (reference). The message has the following fields:</p> <ul> <li><code>lex</code> (1) \u2013 the lexical form of the literal in UTF-8. This field is OPTIONAL and defaults to an empty string.</li> <li><code>literalKind</code> oneof. This field is REQUIRED and exactly one of the following fields MUST be set:<ul> <li><code>simple</code> (2) \u2013 empty message of type <code>RdfLiteralSimple</code> indicating that the literal is a simple literal (has datatype IRI equal to <code>http://www.w3.org/2001/XMLSchema#string</code>).</li> <li><code>langtag</code> (3) \u2013 UTF-8 language tag, indicating that the literal is a language-tagged string (has datatype IRI equal to <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#langString</code>). The language tag SHOULD be a valid BCP 47 language tag.</li> <li><code>datatype</code> (4) \u2013 1-based index of the datatype in the datatype lookup, indicating that the literal is a typed literal. The value of this field MUST be greater than 0 and it MUST correspond to a valid entry in the datatype lookup.</li> </ul> </li> </ul>"},{"location":"specification/serialization/#quoted-triples-rdf-star","title":"Quoted triples (RDF-star)","text":""},{"location":"specification/serialization/#repeated-terms","title":"Repeated terms","text":""},{"location":"specification/serialization/#rdf-graph-nodes","title":"RDF graph nodes","text":""},{"location":"specification/serialization/#delimited-variant-of-jelly","title":"Delimited variant of Jelly","text":"<p>Note</p> <p>Protobuf messages are not delimited, so if you write multiple messages to the same file / socket / byte stream, you need to add some kind of delimiter between them. Jelly uses the convention already implemented in some protobuf libraries of prepending a varint before the message, to specify the length of the message. </p> <p>A byte stream (or file) in the delimited variant MUST consist of a series of delimited <code>RdfStreamFrame</code> messages. A delimited message is a message that has a varint prepended before it, specifying the length of the message in bytes.</p> <p>Implementing the delimited variant is OPTIONAL.</p>"},{"location":"specification/serialization/#implementations","title":"Implementations","text":"<p>The delimiting convention is implemented in Protobuf libraries for:</p> <ul> <li>C++: delimited_message_util.cc</li> <li>Java / Scala: writeDelimitedTo and parseDelimitedFrom</li> </ul> <p>The JVM (Scala) implementation of Jelly also supports the delimited variant \u2013 see the documentation.</p>"},{"location":"specification/serialization/#internet-media-type-and-file-extension","title":"Internet media type and file extension","text":"<p>The RECOMMENDED media type for Jelly is <code>application/x-jelly-rdf</code>. The RECOMMENDED file extension is <code>.jelly</code>.</p> <p>The files SHOULD be saved in the delimited variant of Jelly.</p>"}]}